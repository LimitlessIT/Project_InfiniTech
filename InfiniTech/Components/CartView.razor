@inject ApplicationDbContext context
@inject ProtectedLocalStorage storage
@inject NavigationManager NavigationManager

<div class="p-3">
    <h3>Your Cart</h3>
    <hr class="m-2" />
    @if (cartitems is not null)
    {
        <div class="p-2">
            @foreach (var item in cartitems)
            {
                <div class="row no-gutters mb-3">
                    <div class="col-2">
                        <img src="/image/@item.ThumbnailURL" class="w-100" alt="@item.Name">
                    </div>
                    <div class="col-9">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                        </div>
                    </div>
                    <div class="col-1">
                        <button class="btn btn-danger my-auto" @onclick="()=>Deleteitem(item.ID)"><i class="fas fa-times"></i></button>
                    </div>
                </div>
            }
        </div>
    }
    @if (isorderd)
    {
        <div class="alert alert-primary" role="alert">
            Your Order is Sent Go To The Orders Page To Pay For It And Get It Delivered To You
        </div>
    }
    <hr class="m-2" />
    @if (isUserLoggedIn)
    {
        <button @onclick="() => CreateAnOrder()" class="btn btn-primary">Order</button>
    }
    else
    {
        <p>To Make An Order Make Sure You Are Logged in</p>
    }
</div>
@code {
    [Parameter]
    public bool isUserLoggedIn { get; set; }
    [Parameter]
    public string UserID { get; set; }

    [Parameter]
    public string RedirectURL { get; set; }

    List<Guid> items;
    public List<Product> cartitems = new List<Product>();
    bool isorderd = false;

    protected override async Task OnInitializedAsync()
    {
        var itemsarr = await storage.GetAsync<Guid[]>("cartitems");
        if (itemsarr.Success && itemsarr.Value is not null)
        {
            items = itemsarr.Value.ToList();
            foreach (var item in items)
            {
                if (cartitems.Where(p => p.ID == item).Count() == 0)
                    cartitems.Add(context.Products.Find(item));
            }
        }
        else
        {
            items = new List<Guid>();
        }
    }

    private async void Deleteitem(Guid itemid)
    {
        items.Remove(itemid);
        cartitems.Remove(cartitems.Where(p => p.ID == itemid).FirstOrDefault());
        await storage.SetAsync("cartitems", items);
        await OnInitializedAsync();
    }

    private async void CreateAnOrder()
    {
        if (isUserLoggedIn)
        {
            if (items.Count() > 0)
            {
                var order = new Order()
                {
                    Id = Guid.NewGuid(),
                    UserID = UserID,
                    OrderDate = DateTime.Now,
                    OrderedProducts = new(),
                };
                context.Add(order);
                foreach (var item in cartitems)
                {
                    var orderedprod = new OrderedProduct() { OrderId = order.Id, ProductId = item.ID };
                }
                await storage.SetAsync("cartitems", null);
                items = new List<Guid>() { };
                cartitems = new List<Product>() { };
                isorderd = true;
                await context.SaveChangesAsync();
                NavigationManager.NavigateTo(RedirectURL, forceLoad: true);
            }
        }
    }
}